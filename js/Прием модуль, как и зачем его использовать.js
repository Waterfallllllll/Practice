"use strict";

// Данный прием используется для скрытия внутренних деталей реализации скрипта.

// Данные методы очень сильно помогают от конфликтов переменных. Допустим, у нас есть 2 джс файла которые подключены к одному html файлу. Что будет если мы объявим одни и те же глобальные переменные в 2-ух файлах? Будет конфликт и в последствии ошибка. Для этого нам и нужны эти методы. Они позволяют скрывать код в локальные переменные.

// Первый подход
const number = 1;

(function () { 
    let number = 2;
    console.log(number);
    console.log(number + 3);
}()); // анонимная самовызывающееся функция. Анонимная, потому что нет имени. Самовызывающееся потому что после того, как она была объявлена, то была сразу вызвана. Этот прием позволяет написать код, сразу же его запустить и соответственно получить локальную область видимости. Мы оборачиваем их в скобку, потому что иначе мы получим function declaration и ошибку, так как function declaration не может быть анонимной. Если же мы помещаем функцию внутрь круглых скобок, то она превращается в function expression, и вот функциональное выражение как раз может не иметь имени.
console.log(number);

// Второй подход. Объектный интерфейс

const user = (function () { 
    const privat = function () {
        console.log("I am privat");
    };

    return {
        sayHello: privat
    };
}());

user.sayHello();

// Наша функция создает объект, экспортирует только те методы и свойства которые нам нужны снаружи. Мы этот объект записываем в user и через точку может обращаться к методам или свойствам.