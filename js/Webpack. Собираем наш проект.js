"use strict";

function myModule() {
    this.hello = function () {
        console.log("hello");
    };

    this.goodbye = function () {
        console.log("bye!");
    };
}

// Мы хотим, чтобы данная функция перешла из этого файла в другой. Где мы сможем её вызывать много раз и применять методы, которые меня интересуют.

// Синтаксис commonjs.

module.exports = myModule;  

// module.exports = {
//     mode: "development", // Это режим, в котором будет работать наш webpack. Есть режим development и production. По умолчанию стоит production. Это режим создания продукта, который работает чуть медленей, но включает в себя встроенные в него инструменты по оптимизации кода. Это режим для конечной сборки продукта.

// Если стоит режим development, то наш код будет работать быстрее. Сборка будет происходить быстрее. Он нужен для разработки. И когда мы полностью мы закончим наш проект, мы ставим в production и уже прогоняем через такой режим, чтобы все было чисто оптимизированно и быстро.

//     entry: "./js/script.js", // файл с которого мы будем начинать. Обычно entry файл, это файл в котором прописываются все зависимости require или import из нового стандарта. Это сокращенная запись, однако если захотим использовать несколько файлов, то тут необходимо будет просто создать объект. В документации webpack entry своства все расписано.
//     output: {    // Тут мы конфигурируем тот файл, которые получится в итоге.
//         filename: "bundle.js", // Тот как будет называться файл
//         path: __dirname + "/js" // Куда мы будет складывать файл
//     },
//     watch: true, //Если в true, то webpack после того как был вызван, будет отслеживать изменения наших файлов, и в атоматическом режиме собирать проект каждый раз когда мы сохраняем файл

//     devtool: "source-map", // source map сохраняет исходники файла для легкого редактирования. В документации также есть много режимов.

//     module: {}
// };

// ЧТобы webpack заработал, нужно пропистать npx webpack.