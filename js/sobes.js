"use strict";
//1
let x = 5; alert(x++); //5. Постфиксная форма
//2
// [] + false - null + true;
console.log(typeof ([] + false));// Когда мы работаем с массивом именно в такой операции, он будет приведен к пустой строке. Пустой массив превращается в строку, и после конкатенации с булиновым типом, общий тип превращается в строку, так как строка + что-то = строка.
console.log(typeof ([] + false - null)); // При выполнении не математических операций, получаем NaN
console.log(typeof ([] + false - null + true)); // Дальше ничего не поменяется.
//3
let y = 1; let x = y = 2;  
console.log(x);
//4
let constas = [] + 1 + 2; // Строка + 1 + 2 = 12
console.log(constas);
//5
alert("1"[0]); // Элемент под номером 0, выведится 1
//6
// 2 && 1 && null && 0 && undefined
// Оператор "и" всегда запинается на лжи. То есть, мы получил null.
//7
// !!( a && b ) == (a && b)?
//Два знака !! превращает следующее за ним выражение в булиновое. И понятно дело, что булиновое значение не будет равно значению, которое вернется из следующих круглых скобок.
//8
// alert( null || 2 && 3 || 4 );
// Идём в таблицу приоритетов операторов. И видим, что оператор "и" выполняется первее. Когда у нас оба аргумента при логическом сравнении равны, то нам вернет последнее значение, а именно 3. Далее мы вспоминаем, что оператор "или" в отличии от оператора "и" запинается на правде. Так что как результат null || 2 && 3 операции, нам выдаст 3. Далее идет сравнение null || 2 && 3 || 4, 3 || 4, нам выдаст 3, так как операатор или запинается на правде.
//9
// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?
// Нет, они не равны. Так как, это два разных ящика. Да, допустим, что у нас 2 ящика с одинаковым содержимым, но это все ещё 2 разных ящика. Так что да, они не равны.
//10
// Что выведет этот код: alert( +"Infinity" );
// Оно выведет infinity, но не просто infinity, а infinity с числовым типом данных.
//11
// Верно ли сравнение: "Ёжик" > "яблоко"?
// Чтобы понять, верно это или нет. То нужно заглянуть в таблицу unicode.
//12
// Чему равно 0 || "" || 2 || undefined || true || falsе ?
// Вернется 2, так как или запинается на true.

