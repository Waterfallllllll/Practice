"use strict";

const postData = async (url, data) => {
    const res = await fetch(url, {
        method: "POST",
        headers: {
            "Content-type": "application/json"
        },
        body: data
    });

    return await res.json(); // Тут у нас возвращается промис. Мы не знаем, какой там большой объект мы обрабатываем. Поэтому тут тоже нужен await.
};

// Это наглядный пример. У нас выполняется промис, а затем идёт дальше. Промис это асинхронная функция которая дала запрос и ждёт ответ от сервера. В данном случае в функции postData нам может вернуться ошибка, так как промис присвоил переменной res ожидание и код пошел дальше. Мы не знаем, сколько у нас будет ответ от сервера, поэтому, чтобы в return пришло нормальное значение, нам нужны async и await. Эти операторы делают нашу функцию синхронной. Async - говорит, что внутри функции у нас будет какой-то асинхронный код. Await - мы его ставим перед теми операциями которые нам необходимо дождаться. Эти операторы всегда используется в паре.

